/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Clases.ClsConexion;
import Clases.ClsSonidos;
import java.awt.HeadlessException;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.joda.time.DateTime;
import org.joda.time.Days;

/**
 *
 * @author Will Vasquez
 */
public class FrmAlquiler extends javax.swing.JDialog {
DefaultTableModel modelo;
Double precio;
    /**
     * Creates new form FrmAlquiler
     * @param parent
     * @param modal
     */
    public FrmAlquiler(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Formulario de alquiler");
        setLocationRelativeTo(null);
        ((JPanel)getContentPane()).setOpaque(false); 
        ImageIcon uno=new ImageIcon(this.getClass().getResource("/Diseño/Alquiler.jpg")); 
        JLabel fondo= new JLabel(); fondo.setIcon(uno); 
        getLayeredPane().add(fondo,JLayeredPane.FRAME_CONTENT_LAYER); 
        fondo.setBounds(0,0,uno.getIconWidth(),uno.getIconHeight());
        Grupo.add(Opc_VIP);
        Grupo.add(Opc_comercial);
        Grupo.add(Opc_livianos);
        Grupo.add(Opc_moto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Grupo = new javax.swing.ButtonGroup();
        panelTranslucido1 = new org.edisoncor.gui.panel.PanelTranslucido();
        lblCliente = new javax.swing.JLabel();
        cmbcliente = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbFechaInicio = new org.freixas.jcalendar.JCalendarCombo();
        jLabel3 = new javax.swing.JLabel();
        cmbFechaFin = new org.freixas.jcalendar.JCalendarCombo();
        jLabel4 = new javax.swing.JLabel();
        txtpreciodia = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel5 = new javax.swing.JLabel();
        txtporcentaje = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel6 = new javax.swing.JLabel();
        txtdias = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel7 = new javax.swing.JLabel();
        txtmonto = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel8 = new javax.swing.JLabel();
        lblvehiculo = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtalquiler = new org.edisoncor.gui.textField.TextFieldRectBackground();
        lblPorFavor = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbtipo = new javax.swing.JComboBox();
        BtnActualizar = new javax.swing.JButton();
        BtnEntregar = new javax.swing.JButton();
        BtnLimpiar = new javax.swing.JButton();
        BtnEscoger = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtcodigo = new java.awt.TextField();
        jLabel12 = new javax.swing.JLabel();
        cmbFechaInicio2 = new org.freixas.jcalendar.JCalendarCombo();
        jLabel13 = new javax.swing.JLabel();
        cmbFechaFin2 = new org.freixas.jcalendar.JCalendarCombo();
        jLabel14 = new javax.swing.JLabel();
        cmbcliente2 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        lblvehiculo2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtpreciovehiculo = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel18 = new javax.swing.JLabel();
        txtpreciodia2 = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel22 = new javax.swing.JLabel();
        txtmonto2 = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel19 = new javax.swing.JLabel();
        txtdias2 = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel23 = new javax.swing.JLabel();
        txttotal = new org.edisoncor.gui.textField.TextFieldRectBackground();
        BtnDevolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaEntregados = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaDevueltos = new javax.swing.JTable();
        panelCurves1 = new org.edisoncor.gui.panel.PanelCurves();
        BtnConsultar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        Opc_livianos = new javax.swing.JRadioButton();
        Opc_comercial = new javax.swing.JRadioButton();
        Opc_moto = new javax.swing.JRadioButton();
        Opc_VIP = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblCliente.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        lblCliente.setForeground(new java.awt.Color(255, 255, 255));
        lblCliente.setText("Cliente:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha inicio:");

        cmbFechaInicio.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Fecha fin:");

        cmbFechaFin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFechaFinItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Precio por día:");

        txtpreciodia.setDescripcion("");
        txtpreciodia.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Porcentaje:");

        txtporcentaje.setDescripcion("");
        txtporcentaje.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Días:");

        txtdias.setDescripcion("");
        txtdias.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Monto fianza:");

        txtmonto.setDescripcion("");
        txtmonto.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Vehículo:");

        lblvehiculo.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblvehiculo.setForeground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Precio alquiler:");

        txtalquiler.setDescripcion("");
        txtalquiler.setEnabled(false);

        lblPorFavor.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        lblPorFavor.setForeground(new java.awt.Color(255, 255, 255));
        lblPorFavor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPorFavor.setText("Por favor llene los campos solicitados");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Tipo Vehículo:");

        BtnActualizar.setText("Actualizar");
        BtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTranslucido1Layout = new javax.swing.GroupLayout(panelTranslucido1);
        panelTranslucido1.setLayout(panelTranslucido1Layout);
        panelTranslucido1Layout.setHorizontalGroup(
            panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTranslucido1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPorFavor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTranslucido1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(43, 43, 43)
                        .addComponent(lblvehiculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelTranslucido1Layout.createSequentialGroup()
                        .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(lblCliente))
                        .addGap(27, 27, 27)
                        .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbcliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbFechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                            .addComponent(cmbFechaFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelTranslucido1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(cmbtipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelTranslucido1Layout.createSequentialGroup()
                        .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTranslucido1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtmonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelTranslucido1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(txtalquiler, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelTranslucido1Layout.createSequentialGroup()
                        .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(16, 16, 16)
                        .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtporcentaje, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtdias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtpreciodia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(BtnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTranslucido1Layout.setVerticalGroup(
            panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTranslucido1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCliente)
                    .addComponent(cmbcliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbtipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtpreciodia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnActualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtporcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtdias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtmonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblvehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtalquiler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPorFavor)
                .addContainerGap())
        );

        BtnEntregar.setBackground(new java.awt.Color(0, 0, 0));
        BtnEntregar.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        BtnEntregar.setForeground(new java.awt.Color(255, 255, 255));
        BtnEntregar.setText("Entregar");
        BtnEntregar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        BtnEntregar.setContentAreaFilled(false);
        BtnEntregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnEntregar.setFocusable(false);
        BtnEntregar.setOpaque(true);
        BtnEntregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnEntregarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnEntregarMouseExited(evt);
            }
        });
        BtnEntregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEntregarActionPerformed(evt);
            }
        });

        BtnLimpiar.setBackground(new java.awt.Color(0, 0, 0));
        BtnLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        BtnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        BtnLimpiar.setText("Limpiar");
        BtnLimpiar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        BtnLimpiar.setContentAreaFilled(false);
        BtnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnLimpiar.setFocusable(false);
        BtnLimpiar.setOpaque(true);
        BtnLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnLimpiarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnLimpiarMouseExited(evt);
            }
        });
        BtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimpiarActionPerformed(evt);
            }
        });

        BtnEscoger.setBackground(new java.awt.Color(0, 0, 0));
        BtnEscoger.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        BtnEscoger.setForeground(new java.awt.Color(255, 255, 255));
        BtnEscoger.setText("Escoger Vehículo");
        BtnEscoger.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        BtnEscoger.setContentAreaFilled(false);
        BtnEscoger.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnEscoger.setFocusable(false);
        BtnEscoger.setOpaque(true);
        BtnEscoger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnEscogerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnEscogerMouseExited(evt);
            }
        });
        BtnEscoger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEscogerActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Consulta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10), java.awt.Color.white)); // NOI18N
        jPanel1.setOpaque(false);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Codigo:");

        txtcodigo.setEditable(false);
        txtcodigo.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Fecha inicio:");

        cmbFechaInicio2.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Fecha fin:");

        cmbFechaFin2.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Cliente:");

        cmbcliente2.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Vehiculo:");

        lblvehiculo2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblvehiculo2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Precio vehiculo(US$):");

        txtpreciovehiculo.setDescripcion("");
        txtpreciovehiculo.setEnabled(false);

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Precio por dia:");

        txtpreciodia2.setDescripcion("");
        txtpreciodia2.setEnabled(false);

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Monto fianza:");

        txtmonto2.setDescripcion("");
        txtmonto2.setEnabled(false);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Dias:");

        txtdias2.setDescripcion("");
        txtdias2.setEnabled(false);

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Monto total:");

        txttotal.setDescripcion("");
        txttotal.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbFechaInicio2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbcliente2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbFechaFin2, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(lblvehiculo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel22)
                            .addComponent(jLabel19)
                            .addComponent(jLabel23))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtdias2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtmonto2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpreciodia2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpreciovehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbFechaInicio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cmbFechaFin2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cmbcliente2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(lblvehiculo2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtpreciovehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtpreciodia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtmonto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(txtdias2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        BtnDevolver.setBackground(new java.awt.Color(0, 0, 0));
        BtnDevolver.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        BtnDevolver.setForeground(new java.awt.Color(255, 255, 255));
        BtnDevolver.setText("Devolver Vehículo");
        BtnDevolver.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        BtnDevolver.setContentAreaFilled(false);
        BtnDevolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnDevolver.setFocusable(false);
        BtnDevolver.setOpaque(true);
        BtnDevolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnDevolverMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnDevolverMouseExited(evt);
            }
        });
        BtnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDevolverActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Vehiculos entregados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10), java.awt.Color.white)); // NOI18N
        jPanel2.setOpaque(false);

        TablaEntregados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TablaEntregados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TablaEntregados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaEntregadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaEntregados);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Vehiculos devueltos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10), java.awt.Color.white)); // NOI18N
        jPanel3.setOpaque(false);

        TablaDevueltos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TablaDevueltos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(TablaDevueltos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BtnConsultar.setBackground(new java.awt.Color(0, 0, 0));
        BtnConsultar.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        BtnConsultar.setForeground(new java.awt.Color(255, 255, 255));
        BtnConsultar.setText("Consultar");
        BtnConsultar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        BtnConsultar.setContentAreaFilled(false);
        BtnConsultar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BtnConsultar.setFocusable(false);
        BtnConsultar.setOpaque(true);
        BtnConsultar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnConsultarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnConsultarMouseExited(evt);
            }
        });
        BtnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConsultarActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "¿Que desea consultar?", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10), java.awt.Color.white)); // NOI18N
        jPanel4.setOpaque(false);

        Opc_livianos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Opc_livianos.setForeground(new java.awt.Color(255, 255, 255));
        Opc_livianos.setText("Vehiculos livianos");
        Opc_livianos.setOpaque(false);

        Opc_comercial.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Opc_comercial.setForeground(new java.awt.Color(255, 255, 255));
        Opc_comercial.setText("Vehiculos comerciales");
        Opc_comercial.setOpaque(false);

        Opc_moto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Opc_moto.setForeground(new java.awt.Color(255, 255, 255));
        Opc_moto.setText("Motocicletas");
        Opc_moto.setOpaque(false);

        Opc_VIP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Opc_VIP.setForeground(new java.awt.Color(255, 255, 255));
        Opc_VIP.setText("Vehiculos VIP");
        Opc_VIP.setOpaque(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Opc_livianos)
                .addGap(18, 18, 18)
                .addComponent(Opc_comercial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(Opc_moto)
                .addGap(18, 18, 18)
                .addComponent(Opc_VIP)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Opc_livianos)
                    .addComponent(Opc_comercial)
                    .addComponent(Opc_moto)
                    .addComponent(Opc_VIP))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelCurves1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnEntregar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(BtnEscoger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelTranslucido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BtnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelTranslucido1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnEntregar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnEscoger, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(panelCurves1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnEntregarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnEntregarMouseEntered
        BtnEntregar.setForeground(new java.awt.Color(51, 153, 255));
    }//GEN-LAST:event_BtnEntregarMouseEntered

    private void BtnEntregarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnEntregarMouseExited
        BtnEntregar.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_BtnEntregarMouseExited

    private void BtnEntregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEntregarActionPerformed
        if(txtdias.getText().isEmpty() || txtmonto.getText().isEmpty() || txtalquiler.getText().isEmpty() || txtporcentaje.getText().isEmpty() || txtpreciodia.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debes llenar todos los campos solicitados", "AVISO", JOptionPane.CANCEL_OPTION);
        }
        else if(cmbcliente.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente", "AVISO", JOptionPane.CANCEL_OPTION);
        }    
        else if(cmbFechaInicio.getDate().compareTo(cmbFechaFin.getDate()) > 0 && !(cmbFechaInicio.getSelectedItem().equals(cmbFechaFin.getSelectedItem()))){
            JOptionPane.showMessageDialog(this, "¡La fecha de finalización no puede ser menor que la de inicio!", "AVISO", JOptionPane.CANCEL_OPTION);
        }
        else{
            Object [] opciones ={"Aceptar","Cancelar"};
            DecimalFormat df = new DecimalFormat("0.00");
            precio = Double.parseDouble(txtalquiler.getText()) * Integer.parseInt(txtdias.getText());
            try {
                PreparedStatement st = cn.prepareStatement("SELECT codigo_parquear FROM parquear WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                st.setString(1, cmbcliente.getSelectedItem().toString());
                ResultSet rs = st.executeQuery();
                rs.next();
                int codigo_cliente = rs.getInt(1);
                st = cn.prepareStatement("SELECT codigo_tipo FROM tipo_vehiculos WHERE nombre_tipo = ?");
                st.setString(1, cmbtipo.getSelectedItem().toString());
                ResultSet rs2 = st.executeQuery();
                rs2.next();
                int codigo_tipo = rs2.getInt(1);
                st = cn.prepareStatement("SELECT estado FROM liviano WHERE estado = 1 AND (marca + ', ' + modelo) = ?");
                st.setString(1, lblvehiculo.getText());
                ResultSet rs3 = st.executeQuery();
                if(rs3.next()){
                    JOptionPane.showMessageDialog(this, "El vehiculo que ha escogido ya esta en uso, por favor escoga otro", "AVISO", JOptionPane.CANCEL_OPTION);
                }
                else{
                    st = cn.prepareStatement("SELECT estado FROM vip WHERE estado = 1 AND (marca + ', ' + modelo) = ?");
                    st.setString(1, lblvehiculo.getText());
                    ResultSet rs4 = st.executeQuery();
                    if(rs4.next()){
                        JOptionPane.showMessageDialog(this, "El vehiculo que ha escogido ya esta en uso, por favor escoga otro", "AVISO", JOptionPane.CANCEL_OPTION);
                    }
                    else{
                        st = cn.prepareStatement("SELECT estado FROM comercial WHERE estado = 1 AND (marca + ', ' + modelo) = ?");
                        st.setString(1, lblvehiculo.getText());
                        ResultSet rs5 = st.executeQuery();
                        if(rs5.next()){
                            JOptionPane.showMessageDialog(this, "El vehiculo que ha escogido ya esta en uso, por favor escoga otro", "AVISO", JOptionPane.CANCEL_OPTION);
                        }
                        else{
                            st = cn.prepareStatement("SELECT estado FROM motocicletas WHERE estado = 1 AND (marca + ', ' + modelo) = ?");
                            st.setString(1, lblvehiculo.getText());
                            ResultSet rs6 = st.executeQuery();
                            if(rs6.next()){
                                JOptionPane.showMessageDialog(this, "El vehiculo que ha escogido ya esta en uso, por favor escoga otro", "AVISO", JOptionPane.CANCEL_OPTION);
                            }
                            else{
                                st = cn.prepareStatement("SELECT codigo_liviano FROM liviano WHERE (marca + ', ' + modelo) = ?");
                                st.setString(1, lblvehiculo.getText());
                                ResultSet rs10 = st.executeQuery();
                                if(rs10.next()){
                                    if (JOptionPane.showOptionDialog(null, "El monto a pagar es (US$): " + df.format(precio) + "\n¿Llevar a cabo la cancelación?", "AVISO", JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_OPTION, null, opciones, "Aceptar") == JOptionPane.YES_OPTION) {
                                    st = cn.prepareStatement("SELECT codigo_liviano FROM liviano WHERE (marca + ', ' + modelo) = ?");
                                    st.setString(1, lblvehiculo.getText());
                                    ResultSet rs0 = st.executeQuery();
                                    rs0.next();
                                    int codigo_liviano = rs0.getInt(1);
                                    st = cn.prepareStatement("INSERT INTO alquileres(codigo_parquear, fecha_inicio, fecha_fin, codigo_tipo, precio_dia, dias, monto_fianza, total, estado, codigo_liviano) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                    st.setInt(1, codigo_cliente);
                                    java.sql.Date FechaInicio = new java.sql.Date(cmbFechaInicio.getDate().getTime());
                                    st.setDate(2, FechaInicio);
                                    java.sql.Date FechaFin = new java.sql.Date(cmbFechaFin.getDate().getTime());
                                    st.setDate(3, FechaFin);
                                    st.setInt(4, codigo_tipo);
                                    st.setDouble(5, Double.parseDouble(txtpreciodia.getText()));
                                    st.setInt(6, Integer.parseInt(txtdias.getText()));
                                    st.setDouble(7, Double.parseDouble(txtmonto.getText()));
                                    st.setDouble(8, precio);
                                    st.setInt(9, 1);
                                    st.setInt(10, codigo_liviano);
                                    st.executeUpdate();
                                    st = cn.prepareStatement("UPDATE liviano SET estado = 1 WHERE (marca + ', ' + modelo) = ?");
                                    st.setString(1, lblvehiculo.getText());
                                    st.executeUpdate();
                                    st = cn.prepareStatement("UPDATE parquear SET estado2 = 2 WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                                    st.setString(1, cmbcliente.getSelectedItem().toString());
                                    st.executeUpdate();
                                    JOptionPane.showMessageDialog(this, "Vehiculo entregado con exito", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                                    MostrarLivianos(1);
                                    limpiarOrden();
                                    }
                                }
                                else{
                                    st = cn.prepareStatement("SELECT codigo_vip FROM vip WHERE (marca + ', ' + modelo) = ?");
                                    st.setString(1, lblvehiculo.getText());
                                    ResultSet rs11 = st.executeQuery();
                                    if(rs11.next()){
                                        if (JOptionPane.showOptionDialog(null, "El monto a pagar es (US$): " + df.format(precio) + "\n¿Llevar a cabo la cancelación?", "AVISO", JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_OPTION, null, opciones, "Aceptar") == JOptionPane.YES_OPTION) {
                                        st = cn.prepareStatement("SELECT codigo_vip FROM vip WHERE (marca + ', ' + modelo) = ?");
                                        st.setString(1, lblvehiculo.getText());
                                        ResultSet rs0 = st.executeQuery();
                                        rs0.next();
                                        int codigo_vip = rs0.getInt(1);
                                        st = cn.prepareStatement("UPDATE vip SET estado = 1 WHERE (marca + ', ' + modelo) = ?");
                                        st.setString(1, lblvehiculo.getText());
                                        st.executeUpdate();
                                        st = cn.prepareStatement("UPDATE parquear SET estado2 = 2 WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                                        st.setString(1, cmbcliente.getSelectedItem().toString());
                                        st.executeUpdate();
                                        st = cn.prepareStatement("INSERT INTO alquileres(codigo_parquear, fecha_inicio, fecha_fin, codigo_tipo, precio_dia, dias, monto_fianza, total, estado, codigo_vip) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                        st.setInt(1, codigo_cliente);
                                        java.sql.Date FechaInicio = new java.sql.Date(cmbFechaInicio.getDate().getTime());
                                        st.setDate(2, FechaInicio);
                                        java.sql.Date FechaFin = new java.sql.Date(cmbFechaFin.getDate().getTime());
                                        st.setDate(3, FechaFin);
                                        st.setInt(4, codigo_tipo);
                                        st.setDouble(5, Double.parseDouble(txtpreciodia.getText()));
                                        st.setInt(6, Integer.parseInt(txtdias.getText()));
                                        st.setDouble(7, Double.parseDouble(txtmonto.getText()));
                                        st.setDouble(8, precio);
                                        st.setInt(9, 1);
                                        st.setInt(10, codigo_vip);
                                        st.executeUpdate();
                                        JOptionPane.showMessageDialog(this, "Vehiculo entregado con exito", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                                        MostrarVIP(1);
                                        limpiarOrden();
                                        }
                                    }
                                    else{
                                        st = cn.prepareStatement("SELECT codigo_comercial FROM comercial WHERE (marca + ', ' + modelo) = ?");
                                        st.setString(1, lblvehiculo.getText());
                                        ResultSet rs12 = st.executeQuery();
                                        if(rs12.next()){
                                            if (JOptionPane.showOptionDialog(null, "El monto a pagar es (US$): " + df.format(precio) + "\n¿Llevar a cabo la cancelación?", "AVISO", JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_OPTION, null, opciones, "Aceptar") == JOptionPane.YES_OPTION) {
                                            st = cn.prepareStatement("SELECT codigo_comercial FROM comercial WHERE (marca + ', ' + modelo) = ?");
                                            st.setString(1, lblvehiculo.getText());
                                            ResultSet rs0 = st.executeQuery();
                                            rs0.next();
                                            int codigo_comercial = rs0.getInt(1);
                                            st = cn.prepareStatement("UPDATE comercial SET estado = 1 WHERE (marca + ', ' + modelo) = ?");
                                            st.setString(1, lblvehiculo.getText());
                                            st.executeUpdate();
                                            st = cn.prepareStatement("UPDATE parquear SET estado2 = 2 WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                                            st.setString(1, cmbcliente.getSelectedItem().toString());
                                            st.executeUpdate();
                                            st = cn.prepareStatement("INSERT INTO alquileres(codigo_parquear, fecha_inicio, fecha_fin, codigo_tipo, precio_dia, dias, monto_fianza, total, estado, codigo_comercial) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                            st.setInt(1, codigo_cliente);
                                            java.sql.Date FechaInicio = new java.sql.Date(cmbFechaInicio.getDate().getTime());
                                            st.setDate(2, FechaInicio);
                                            java.sql.Date FechaFin = new java.sql.Date(cmbFechaFin.getDate().getTime());
                                            st.setDate(3, FechaFin);
                                            st.setInt(4, codigo_tipo);
                                            st.setDouble(5, Double.parseDouble(txtpreciodia.getText()));
                                            st.setInt(6, Integer.parseInt(txtdias.getText()));
                                            st.setDouble(7, Double.parseDouble(txtmonto.getText()));
                                            st.setDouble(8, precio);
                                            st.setInt(9, 1);
                                            st.setInt(10, codigo_comercial);
                                            st.executeUpdate();
                                            JOptionPane.showMessageDialog(this, "Vehiculo entregado con exito", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                                            MostrarComercial(1);
                                            limpiarOrden();
                                            }
                                        }
                                        else{
                                            st = cn.prepareStatement("SELECT codigo_moto FROM motocicletas WHERE (marca + ', ' + modelo) = ?");
                                            st.setString(1, lblvehiculo.getText());
                                            ResultSet rs13 = st.executeQuery();
                                            if(rs13.next()){
                                                if (JOptionPane.showOptionDialog(null, "El monto a pagar es (US$): " + df.format(precio) + "\n¿Llevar a cabo la cancelación?", "AVISO", JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_OPTION, null, opciones, "Aceptar") == JOptionPane.YES_OPTION) {
                                                st = cn.prepareStatement("SELECT codigo_moto FROM motocicletas WHERE (marca + ', ' + modelo) = ?");
                                                st.setString(1, lblvehiculo.getText());
                                                ResultSet rs0 = st.executeQuery();
                                                rs0.next();
                                                int codigo_moto = rs0.getInt(1);
                                                st = cn.prepareStatement("UPDATE motocicletas SET estado = 1 WHERE (marca + ', ' + modelo) = ?");
                                                st.setString(1, lblvehiculo.getText());
                                                st.executeUpdate();
                                                st = cn.prepareStatement("UPDATE parquear SET estado2 = 2 WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                                                st.setString(1, cmbcliente.getSelectedItem().toString());
                                                st.executeUpdate();
                                                st = cn.prepareStatement("INSERT INTO alquileres(codigo_parquear, fecha_inicio, fecha_fin, codigo_tipo, precio_dia, dias, monto_fianza, total, estado, codigo_moto) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                st.setInt(1, codigo_cliente);
                                                java.sql.Date FechaInicio = new java.sql.Date(cmbFechaInicio.getDate().getTime());
                                                st.setDate(2, FechaInicio);
                                                java.sql.Date FechaFin = new java.sql.Date(cmbFechaFin.getDate().getTime());
                                                st.setDate(3, FechaFin);
                                                st.setInt(4, codigo_tipo);
                                                st.setDouble(5, Double.parseDouble(txtpreciodia.getText()));
                                                st.setInt(6, Integer.parseInt(txtdias.getText()));
                                                st.setDouble(7, Double.parseDouble(txtmonto.getText()));
                                                st.setDouble(8, precio);
                                                st.setInt(9, 1);
                                                st.setInt(10, codigo_moto);
                                                st.executeUpdate();
                                                JOptionPane.showMessageDialog(this, "Vehiculo entregado con exito", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                                                MostrarMotos(1);
                                                limpiarOrden();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } catch (HeadlessException | NumberFormatException | SQLException e) {Logger.getLogger(FrmAlquiler.class.getName()).log(Level.SEVERE, null, e);}
        }
    }//GEN-LAST:event_BtnEntregarActionPerformed

    private void BtnLimpiarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnLimpiarMouseEntered
        BtnLimpiar.setForeground(new java.awt.Color(51, 153, 255));
    }//GEN-LAST:event_BtnLimpiarMouseEntered

    private void BtnLimpiarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnLimpiarMouseExited
        BtnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_BtnLimpiarMouseExited

    private void BtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimpiarActionPerformed
        limpiarOrden();
        limpiarConsulta();
        TablaDevueltos.setModel(new DefaultTableModel());
        TablaEntregados.setModel(new DefaultTableModel());
    }//GEN-LAST:event_BtnLimpiarActionPerformed

    private void BtnEscogerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnEscogerMouseEntered
        BtnEscoger.setForeground(new java.awt.Color(51, 153, 255));
    }//GEN-LAST:event_BtnEscogerMouseEntered

    private void BtnEscogerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnEscogerMouseExited
        BtnEscoger.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_BtnEscogerMouseExited

    private void BtnEscogerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEscogerActionPerformed
        try {
        if(cmbtipo.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Debes elegir un tipo de vehiculo segun tu necesidad", "AVISO", JOptionPane.CANCEL_OPTION);
        }
        else if(cmbtipo.getSelectedIndex() == 0){
            FrmComercial obj = new FrmComercial(null, true);
            obj.setVisible(true);
            this.lblvehiculo.setText(obj.getMark2());
            PreparedStatement st = cn.prepareStatement("SELECT porcentaje FROM tipo_vehiculos WHERE nombre_tipo = ?");
            st.setString(1, cmbtipo.getSelectedItem().toString());
            ResultSet rs = st.executeQuery();
            rs.next();
            int porcentaje = rs.getInt(1);
            st = cn.prepareStatement("SELECT CONVERT(decimal(7,2), precio_vehiculo, 0), CONVERT(decimal(7,2), precio_alquiler, 0) FROM comercial WHERE marca + ', ' + modelo = ?");
            st.setString(1, lblvehiculo.getText());
            ResultSet rs2 = st.executeQuery();
            rs2.next();
            String precio_vehiculo = rs2.getString(1);
            String precio_alquiler = rs2.getString(2);
            txtporcentaje.setText(String.valueOf(porcentaje));
            txtalquiler.setText(precio_alquiler);
            txtpreciodia.setText(precio_alquiler);
            Double monto_fianza; 
            monto_fianza = (Double.parseDouble(txtporcentaje.getText()) / 100) * Double.parseDouble(precio_vehiculo);
            txtmonto.setText(String.valueOf(monto_fianza));
        }
        else if(cmbtipo.getSelectedIndex() == 1){
            FrmLivianos obj = new FrmLivianos(null, true);
            obj.setVisible(true);
            this.lblvehiculo.setText(obj.getMark());
            PreparedStatement st = cn.prepareStatement("SELECT porcentaje FROM tipo_vehiculos WHERE nombre_tipo = ?");
            st.setString(1, cmbtipo.getSelectedItem().toString());
            ResultSet rs = st.executeQuery();
            rs.next();
            int porcentaje = rs.getInt(1);
            st = cn.prepareStatement("SELECT CONVERT(decimal(7,2), precio_vehiculo, 0), CONVERT(decimal(7,2), precio_alquiler, 0) FROM liviano WHERE marca + ', ' + modelo = ?");
            st.setString(1, lblvehiculo.getText());
            ResultSet rs2 = st.executeQuery();
            rs2.next();
            String precio_vehiculo = rs2.getString(1);
            String precio_alquiler = rs2.getString(2);
            txtporcentaje.setText(String.valueOf(porcentaje));
            txtalquiler.setText(precio_alquiler);
            txtpreciodia.setText(precio_alquiler);
            Double monto_fianza; 
            monto_fianza = (Double.parseDouble(txtporcentaje.getText()) / 100) * Double.parseDouble(precio_vehiculo);
            txtmonto.setText(String.valueOf(monto_fianza));
        }
        else if(cmbtipo.getSelectedIndex() == 2){
            FrmMotocicletas obj = new FrmMotocicletas(null, true);
            obj.setVisible(true);
            this.lblvehiculo.setText(obj.getMark2());
            PreparedStatement st = cn.prepareStatement("SELECT porcentaje FROM tipo_vehiculos WHERE nombre_tipo = ?");
            st.setString(1, cmbtipo.getSelectedItem().toString());
            ResultSet rs = st.executeQuery();
            rs.next();
            int porcentaje = rs.getInt(1);
            st = cn.prepareStatement("SELECT CONVERT(decimal(7,2), precio_vehiculo, 0), CONVERT(decimal(7,2), precio_alquiler, 0) FROM motocicletas WHERE marca + ', ' + modelo = ?");
            st.setString(1, lblvehiculo.getText());
            ResultSet rs2 = st.executeQuery();
            rs2.next();
            String precio_vehiculo = rs2.getString(1);
            String precio_alquiler = rs2.getString(2);
            txtporcentaje.setText(String.valueOf(porcentaje));
            txtalquiler.setText(precio_alquiler);
            txtpreciodia.setText(precio_alquiler);
            Double monto_fianza; 
            monto_fianza = (Double.parseDouble(txtporcentaje.getText()) / 100) * Double.parseDouble(precio_vehiculo);
            txtmonto.setText(String.valueOf(monto_fianza));
        }
        else if(cmbtipo.getSelectedIndex() == 3){
            FrmVIP obj2 = new FrmVIP(null, true);
            obj2.setVisible(true);
            this.lblvehiculo.setText(obj2.getMark2());
            PreparedStatement st = cn.prepareStatement("SELECT porcentaje FROM tipo_vehiculos WHERE nombre_tipo = ?");
            st.setString(1, cmbtipo.getSelectedItem().toString());
            ResultSet rs = st.executeQuery();
            rs.next();
            int porcentaje = rs.getInt(1);
            st = cn.prepareStatement("SELECT CONVERT(decimal(7,2), precio_vehiculo, 0), CONVERT(decimal(7,2), precio_alquiler, 0) FROM vip WHERE marca + ', ' + modelo = ?");
            st.setString(1, lblvehiculo.getText());
            ResultSet rs2 = st.executeQuery();
            rs2.next();
            String precio_vehiculo = rs2.getString(1);
            String precio_alquiler = rs2.getString(2);
            txtporcentaje.setText(String.valueOf(porcentaje));
            txtalquiler.setText(precio_alquiler);
            txtpreciodia.setText(precio_alquiler);
            Double monto_fianza; 
            monto_fianza = (Double.parseDouble(txtporcentaje.getText()) / 100) * Double.parseDouble(precio_vehiculo);
            txtmonto.setText(String.valueOf(monto_fianza));
            }
        }catch(HeadlessException | NumberFormatException | SQLException e){System.out.println(e);}
    }//GEN-LAST:event_BtnEscogerActionPerformed

    private void BtnDevolverMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnDevolverMouseEntered
        BtnDevolver.setForeground(new java.awt.Color(51, 153, 255));
    }//GEN-LAST:event_BtnDevolverMouseEntered

    private void BtnDevolverMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnDevolverMouseExited
        BtnDevolver.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_BtnDevolverMouseExited

    private void BtnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDevolverActionPerformed
        if(txtcodigo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debes realizar una consulta", "AVISO", JOptionPane.CANCEL_OPTION);
        }
        else{
            try {
                PreparedStatement st = cn.prepareStatement("SELECT codigo_liviano FROM liviano WHERE (marca + ', ' + modelo) = ?");
                st.setString(1, lblvehiculo2.getText());
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    st = cn.prepareStatement("UPDATE liviano SET estado = 0 WHERE (marca + ', ' + modelo) = ?");
                    st.setString(1, lblvehiculo2.getText());
                    st.executeUpdate();
                    MostrarLivianos2(0);
                    TablaEntregados.setModel(new DefaultTableModel());
                }
                else{
                    st = cn.prepareStatement("SELECT codigo_vip FROM vip WHERE (marca + ', ' + modelo) = ?");
                    st.setString(1, lblvehiculo2.getText());
                    ResultSet rs2 = st.executeQuery();
                    if(rs2.next()){
                        st = cn.prepareStatement("UPDATE vip SET estado = 0 WHERE (marca + ', ' + modelo) = ?");
                        st.setString(1, lblvehiculo2.getText());
                        st.executeUpdate();
                        MostrarVIP2(0);
                        TablaEntregados.setModel(new DefaultTableModel());
                    }
                    else{
                        st = cn.prepareStatement("SELECT codigo_comercial FROM comercial WHERE (marca + ', ' + modelo) = ?");
                        st.setString(1, lblvehiculo2.getText());
                        ResultSet rs3 = st.executeQuery();
                        if(rs3.next()){
                            st = cn.prepareStatement("UPDATE comercial SET estado = 0 WHERE (marca + ', ' + modelo) = ?");
                            st.setString(1, lblvehiculo2.getText());
                            st.executeUpdate();
                            MostrarComercial2(0);
                            TablaEntregados.setModel(new DefaultTableModel());
                        }
                        else{
                            st = cn.prepareStatement("SELECT codigo_moto FROM motocicletas WHERE (marca + ', ' + modelo) = ?");
                            st.setString(1, lblvehiculo2.getText());
                            ResultSet rs4 = st.executeQuery();
                            if(rs4.next()){
                                st = cn.prepareStatement("UPDATE motocicletas SET estado = 0 WHERE (marca + ', ' + modelo) = ?");
                                st.setString(1, lblvehiculo2.getText());
                                st.executeUpdate();
                                MostrarMotos2(0);
                                TablaEntregados.setModel(new DefaultTableModel());
                            }
                        }
                    }
                }
                st = cn.prepareStatement("UPDATE parquear SET estado2 = 1 WHERE (apellidos_cliente + ', ' + nombres_cliente) = ?");
                st.setString(1, cmbcliente2.getSelectedItem().toString());
                st.executeUpdate();
                st = cn.prepareStatement("UPDATE alquileres SET estado = 0 WHERE codigo_alquiler = ?");
                st.setInt(1, Integer.parseInt(txtcodigo.getText()));
                st.executeUpdate();
                JOptionPane.showMessageDialog(this, "Vehiculo devuelto con exito", "AVISU", JOptionPane.INFORMATION_MESSAGE);
                limpiarOrden();
                limpiarConsulta();
            } catch (SQLException e) {Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, e);}
        }
    }//GEN-LAST:event_BtnDevolverActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ClsSonidos.AbrirVentana();
        CargarTipo();
        CargarCliente();
        CargarCliente2();
        cmbcliente2.setSelectedIndex(-1);
        cmbtipo.setSelectedIndex(-1);
        cmbcliente.setSelectedIndex(-1);
    }//GEN-LAST:event_formWindowOpened

    private void BtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnActualizarActionPerformed
        int dias = Days.daysBetween(new DateTime(cmbFechaInicio.getDate()), new DateTime(cmbFechaFin.getDate())).getDays() + 1;
        txtdias.setText(String.valueOf(dias));
    }//GEN-LAST:event_BtnActualizarActionPerformed

    private void cmbFechaFinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFechaFinItemStateChanged
        int dias = Days.daysBetween(new DateTime(cmbFechaInicio.getDate()), new DateTime(cmbFechaFin.getDate())).getDays() + 1;
        txtdias.setText(String.valueOf(dias));
    }//GEN-LAST:event_cmbFechaFinItemStateChanged

    private void BtnConsultarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnConsultarMouseEntered
        BtnConsultar.setForeground(new java.awt.Color(51, 153, 255));
    }//GEN-LAST:event_BtnConsultarMouseEntered

    private void BtnConsultarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnConsultarMouseExited
        BtnConsultar.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_BtnConsultarMouseExited

    private void BtnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConsultarActionPerformed
        if(!(Opc_VIP.isSelected() || Opc_comercial.isSelected() || Opc_livianos.isSelected() || Opc_moto.isSelected())){
            JOptionPane.showMessageDialog(this, "Debes escoger una opcion para realizar una consulta", "AVISO", JOptionPane.CANCEL_OPTION);
        }
        else if(Opc_livianos.isSelected()){
            MostrarLivianos(1);
            MostrarLivianos2(0);
        }
        else if(Opc_comercial.isSelected()){
            MostrarComercial(1);
            MostrarComercial2(0);
        }
        else if(Opc_moto.isSelected()){
            MostrarMotos(1);
            MostrarMotos2(0);
        }
        else if(Opc_VIP.isSelected()){
            MostrarVIP(1);
            MostrarVIP2(0);
        }
    }//GEN-LAST:event_BtnConsultarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ClsSonidos.CerrarVentana();
    }//GEN-LAST:event_formWindowClosing

    private void TablaEntregadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaEntregadosMouseClicked
        try {
            txtcodigo.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 0).toString());
            cmbcliente2.setSelectedItem(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 1).toString());
            SimpleDateFormat Formateador = new SimpleDateFormat("dd/MM/yyyy");
            java.util.Date fechaInicio = Formateador.parse(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 2).toString());
            java.util.Date fechaFin = Formateador.parse(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 3).toString());
            cmbFechaInicio2.setDate(fechaInicio);
            cmbFechaFin2.setDate(fechaFin);
            lblvehiculo2.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 9).toString());
            txtpreciodia2.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 5).toString());
            txtmonto2.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 7).toString());
            txtdias2.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 6).toString());
            txttotal.setText(TablaEntregados.getValueAt(TablaEntregados.getSelectedRow(), 8).toString());
            PreparedStatement st = cn.prepareStatement("SELECT codigo_liviano FROM liviano WHERE (marca + ', ' + modelo) = ?");
            st.setString(1, lblvehiculo2.getText());
            ResultSet rs = st.executeQuery();
            if(rs.next()){
                DecimalFormat formato = new DecimalFormat("0.00");
                st = cn.prepareStatement("SELECT precio_vehiculo FROM liviano WHERE (marca + ', ' + modelo) = ?");
                st.setString(1, lblvehiculo2.getText());
                ResultSet rs2 = st.executeQuery();
                rs2.next();
                Double Precio_vehiculo = rs2.getDouble(1);
                txtpreciovehiculo.setText(String.valueOf(formato.format(Precio_vehiculo)));
            }
            else{
                st = cn.prepareStatement("SELECT codigo_vip FROM vip WHERE (marca + ', ' + modelo) = ?");
                st.setString(1, lblvehiculo2.getText());
                ResultSet rs3 = st.executeQuery();
                if(rs3.next()){
                    DecimalFormat formato = new DecimalFormat("0.00");
                    st = cn.prepareStatement("SELECT precio_vehiculo FROM vip WHERE (marca + ', ' + modelo) = ?");
                    st.setString(1, lblvehiculo2.getText());
                    ResultSet rs2 = st.executeQuery();
                    rs2.next();
                    Double Precio_vehiculo = rs2.getDouble(1);
                    txtpreciovehiculo.setText(String.valueOf(formato.format(Precio_vehiculo)));
                }
                else{
                    st = cn.prepareStatement("SELECT codigo_comercial FROM comercial WHERE (marca + ', ' + modelo) = ?");
                    st.setString(1, lblvehiculo2.getText());
                    ResultSet rs4 = st.executeQuery();
                    if(rs4.next()){
                        DecimalFormat formato = new DecimalFormat("0.00");
                        st = cn.prepareStatement("SELECT precio_vehiculo FROM comercial WHERE (marca + ', ' + modelo) = ?");
                        st.setString(1, lblvehiculo2.getText());
                        ResultSet rs2 = st.executeQuery();
                        rs2.next();
                        Double Precio_vehiculo = rs2.getDouble(1);
                        txtpreciovehiculo.setText(String.valueOf(formato.format(Precio_vehiculo)));
                    }
                    else{
                        st = cn.prepareStatement("SELECT codigo_moto FROM motocicletas WHERE (marca + ', ' + modelo) = ?");
                        st.setString(1, lblvehiculo2.getText());
                        ResultSet rs5 = st.executeQuery();
                        if(rs5.next()){
                            DecimalFormat formato = new DecimalFormat("0.00");
                            st = cn.prepareStatement("SELECT precio_vehiculo FROM motocicletas WHERE (marca + ', ' + modelo) = ?");
                            st.setString(1, lblvehiculo2.getText());
                            ResultSet rs2 = st.executeQuery();
                            rs2.next();
                            Double Precio_vehiculo = rs2.getDouble(1);
                            txtpreciovehiculo.setText(String.valueOf(formato.format(Precio_vehiculo)));
                        }
                    }
                }
            }
        } catch (ParseException | SQLException e) {System.out.println(e);}
    }//GEN-LAST:event_TablaEntregadosMouseClicked

    public void MostrarLivianos(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaEntregados.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, liviano AS li WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_liviano=li.codigo_liviano AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaEntregados.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarLivianos2(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaDevueltos.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, liviano AS li WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_liviano=li.codigo_liviano AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaDevueltos.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarVIP(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaEntregados.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, vip AS v WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_vip=v.codigo_vip AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaEntregados.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarVIP2(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaDevueltos.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, vip AS v WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_vip=v.codigo_vip AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaDevueltos.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarComercial(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaEntregados.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, comercial AS co WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_comercial=co.codigo_comercial AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaEntregados.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarComercial2(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaDevueltos.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, comercial AS co WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_comercial=co.codigo_comercial AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaDevueltos.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarMotos(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaEntregados.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, motocicletas AS mo WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_moto=mo.codigo_moto AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaEntregados.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void MostrarMotos2(int estado){
    modelo= new DefaultTableModel();
    modelo.addColumn("Codigo alquiler");
    modelo.addColumn("Cliente");
    modelo.addColumn("Fecha inicio");
    modelo.addColumn("Fecha fin");
    modelo.addColumn("Tipo vehiculo");
    modelo.addColumn("Precio dia");
    modelo.addColumn("Dias");
    modelo.addColumn("Monto fianza");
    modelo.addColumn("Monto total");
    modelo.addColumn("Vehiculo");
    TablaDevueltos.setModel(modelo);
    String sql="SELECT codigo_alquiler, (apellidos_cliente + ', ' + nombres_cliente), CONVERT(VARCHAR(10), fecha_inicio, 103), CONVERT(VARCHAR(10), fecha_fin, 103), nombre_tipo, CONVERT(decimal(7,2), precio_dia, 0), dias, CONVERT(decimal(7,2), monto_fianza, 0), CONVERT(decimal(7,2), total, 0), (marca + ', ' + modelo)  FROM alquileres AS al, parquear AS pa, tipo_vehiculos AS ti, motocicletas AS mo WHERE al.codigo_parquear=pa.codigo_parquear AND al.codigo_tipo=ti.codigo_tipo AND al.codigo_moto=mo.codigo_moto AND al.estado = " + estado;
    String []datos = new String [10];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while(rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=rs.getString(5);
                datos[5]=rs.getString(6);
                datos[6]=rs.getString(7);
                datos[7]=rs.getString(8);
                datos[8]=rs.getString(9);
                datos[9]=rs.getString(10);
                modelo.addRow(datos);
            }
            TablaDevueltos.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPuestos.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
    
    public void CargarTipo() 
    {
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery("SELECT nombre_tipo FROM tipo_vehiculos ORDER BY nombre_tipo");
            cmbtipo.removeAllItems();
            while(rs.next())
            {
                cmbtipo.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void CargarCliente() 
    {
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery("SELECT apellidos_cliente + ', ' + nombres_cliente AS nombres FROM parquear ORDER BY apellidos_cliente");
            cmbcliente.removeAllItems();
            while(rs.next())
            {
                cmbcliente.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void CargarCliente2() 
    {
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery("SELECT apellidos_cliente + ', ' + nombres_cliente AS nombres FROM parquear ORDER BY apellidos_cliente");
            cmbcliente2.removeAllItems();
            while(rs.next())
            {
                cmbcliente2.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void limpiarOrden(){
        cmbcliente.setSelectedIndex(-1);
        cmbFechaInicio.setDate(new java.util.Date());
        cmbFechaFin.setDate(new java.util.Date());
        cmbtipo.setSelectedIndex(-1);
        txtpreciodia.setText(null);
        txtporcentaje.setText(null);
        txtdias.setText(null);
        txtmonto.setText(null);
        lblvehiculo.setText(null);
        txtalquiler.setText(null);
    }
    
    void limpiarConsulta(){
        txtcodigo.setText(null);
        cmbFechaInicio2.setDate(new java.util.Date());
        cmbFechaFin2.setDate(new java.util.Date());
        cmbcliente2.setSelectedIndex(-1);
        lblvehiculo2.setText(null);
        txtpreciovehiculo.setText(null);
        txtpreciodia2.setText(null);
        txtmonto2.setText(null);
        txtdias2.setText(null);
        txttotal.setText(null);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAlquiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmAlquiler dialog = new FrmAlquiler(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnActualizar;
    private javax.swing.JButton BtnConsultar;
    private javax.swing.JButton BtnDevolver;
    private javax.swing.JButton BtnEntregar;
    private javax.swing.JButton BtnEscoger;
    private javax.swing.JButton BtnLimpiar;
    private javax.swing.ButtonGroup Grupo;
    private javax.swing.JRadioButton Opc_VIP;
    private javax.swing.JRadioButton Opc_comercial;
    private javax.swing.JRadioButton Opc_livianos;
    private javax.swing.JRadioButton Opc_moto;
    private javax.swing.JTable TablaDevueltos;
    private javax.swing.JTable TablaEntregados;
    private org.freixas.jcalendar.JCalendarCombo cmbFechaFin;
    private org.freixas.jcalendar.JCalendarCombo cmbFechaFin2;
    private org.freixas.jcalendar.JCalendarCombo cmbFechaInicio;
    private org.freixas.jcalendar.JCalendarCombo cmbFechaInicio2;
    private javax.swing.JComboBox cmbcliente;
    private javax.swing.JComboBox cmbcliente2;
    private javax.swing.JComboBox cmbtipo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblPorFavor;
    private javax.swing.JLabel lblvehiculo;
    private javax.swing.JLabel lblvehiculo2;
    private org.edisoncor.gui.panel.PanelCurves panelCurves1;
    private org.edisoncor.gui.panel.PanelTranslucido panelTranslucido1;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtalquiler;
    private java.awt.TextField txtcodigo;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtdias;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtdias2;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtmonto;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtmonto2;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtporcentaje;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtpreciodia;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtpreciodia2;
    private org.edisoncor.gui.textField.TextFieldRectBackground txtpreciovehiculo;
    private org.edisoncor.gui.textField.TextFieldRectBackground txttotal;
    // End of variables declaration//GEN-END:variables
ClsConexion cc = new ClsConexion();
Connection cn = cc.conectar();
}